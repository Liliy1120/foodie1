const API_KEY = "0F8tsfN1kR49K9GTvmOPk7FhNSnkR2qFmmnsbRwnVCI0r63az-c53cIUI7M-oWIcZMXwhbotk0uwiKU-Nu-OpJfT0ekoFijrykJRdzC9ves6CyPNIg5sBS8Vkg9hX3Yx" 
//PSAGR4VMTKQJBUN0CIDGUUIA0QA4NA1JH3BMRAANDRFFKGGE" foursquare
//for google api = 'AIzaSyD3XTQjMngN4V8BsFlm6_eHDQ_zEoyLvYc'
//for fusion api =  Client ID =KV5xcCMw15aztax0s7REvQ
//API Key = iAQyc_4wBvpGPNmjmBB1XUP44Gf6hPfTq3_87wFLPAXTtBpEKsxkrx9ZGdd4Nt5AjbvnZl7Mzo2UapGDSePFZzYnbTGsWvhMhNhOFgKm29CIJ85rMtWuslPHNhVZX3Yx


//for foursquare
//Client Id= DVIVVUDWK4W2NALLKRFLU5U00BI2E12OLDLRJ5ODEHZPTZDG
//Client Secret =PSAGR4VMTKQJBUN0CIDGUUIA0QA4NA1JH3BMRAANDRFFKGGE
const searchURL = "https://cors-anywhere.herokuapp.com/https://api.yelp.com/v3/businesses/search"
//"https://maps.googleapis.com/maps/api/place/nearbysearch/json"

//6. this function
function formatQueryParams(params) {
//Object.keys(obj) â€“ returns an array of keys.
    const queryItems = Object.keys(params)
        .map(key => `${encodeURIComponent(key)}=${encodeURIComponent(params[key])}`)
//encodeURIComponent converts strings to URL safe formats by escaping characters like spaces to %20
//The encodeURIComponent() function encodes a URI component.This function 
//encodes special characters. In addition, it encodes the following characters: , / ? : @ & = + $ #
//Return Value: 	A String, representing the encoded URI
    return queryItems.join('&');
}
//6.Taking a look at this function, it gets passed an arbitrary object of query parameters, 
//and iterates over the keys in the object. 
//It uses .map, to generate an array whose items are strings representing each key-value pair. 
//For each key, it uses the built-in JavaScript function encodeURIComponent, 
//which converts strings to URL safe formats by escaping characters like spaces to %20. 
//It does the same for each value, connecting the key and value with an = character.
// After mapping each of the key-value pairs, formatQueryParams finally returns a single 
//string generated by joining each array item with the "&" character.
//12.
function displayResults(responseJson) {
    // if there are previous results, remove them
    console.log(responseJson);
    $('.search-results').empty();
    // iterate through the items array
    for (let i = 0; i < responseJson.businesses.length; i++){
        // for each object in the items
        //array, add a list item to the results
        //list with the video title, description,
        //and thumbnail
        $('.search-results').append(
            `<li>
                <h3>${responseJson.businesses[i].name}</h3>
                <img src='${responseJson.businesses[i].image_url}' width="200">
                <p>${responseJson.businesses[i].location.display_address}</p>
                <p>${responseJson.businesses[i].phone}</p>
                <p>${responseJson.businesses[i].rating}</p>
                <a href="${responseJson.businesses[i].url}" target="_blank" >Website: ${responseJson.businesses[0].url}</a>
    
            </li>`
        ) 
      };
    //display the results section
    $('.results').removeClass('hidden');
    console.log(responseJson.description);
};


function getRestaurants(query, location){
    //4.object called params, params has key-value pairs for each of the URL
    //query parameters we need to provide 
    const params = {
        location: location,
        radius: 32500, 
        term: query,
        limit: 25,
        };
    //5. once we have the object(params above) we need to convert it to "foo=bar&bizz=bang" format
    //this is where the function formatQueryParams comes in we run params through it
    const queryString = formatQueryParams(params)
    //7. create the URL for the GET request to 
    //by combining the base URL, "?" character, and our query parameters string
    let url = searchURL + '?' + queryString;
    console.log(url);
    
    var myHeaders = new Headers();
    myHeaders.append("Authorization", "Bearer 0F8tsfN1kR49K9GTvmOPk7FhNSnkR2qFmmnsbRwnVCI0r63az-c53cIUI7M-oWIcZMXwhbotk0uwiKU-Nu-OpJfT0ekoFijrykJRdzC9ves6CyPNIg5sBS8Vkg9hX3Yx");

    var requestOptions = {
        method: 'GET',
        headers: myHeaders,
        redirect: 'follow'
    };

    fetch(url, requestOptions)
    .then(response => {
      if (response.ok) {
          return response.json();
      }
//10.if not ok we throw an error
      throw new Error(response.statusText);
  })
//11.otherwise we call response.json and run it through displayResults
  .then(responseJson => displayResults(responseJson))

  .catch(err => {
      $('#js-error-message').text(`Something went wrong: ${err.message}`);
  });
}

function watchForm() {
    $('.search-venueform').submit(event => {
        event.preventDefault();
        getLocation();
    //2.retrieve two values from the form have
    //theses two values = another term
    console.log($('.venue-type').val())
    console.log($(".city_address").val())
        const searchTerm = $('.venue-type').val();
        const locationadd = $(".city_address").val()
    //3. pass value from form 
        getRestaurants(searchTerm, locationadd);
});
}


function unhideKeyword(){
    $('.go').submit(function(e){
        e.preventDefault();
        $(".search-venue").removeClass(hidden)
        $(".button").hide();
        console.log('button worked');
    });
};

//start of accordian faq 
var acc = document.getElementsByClassName("accordion");
var i;

for (i = 0; i < acc.length; i++) {
  acc[i].addEventListener("click", function() {
    /* Toggle between adding and removing the "active" class,
    to highlight the button that controls the panel */
    this.classList.toggle("active");

    /* Toggle between hiding and showing the active panel */
    var panel = this.nextElementSibling;
    if (panel.style.display === "block") {
      panel.style.display = "none";
    } else {
      panel.style.display = "block";
    }
  });
} 
// end of accordian faq


//get current location
function getLocation() {
  if (navigator.geolocation) {
    navigator.geolocation.watchPosition(showPosition);
  } else { 
    x.innerHTML = "Geolocation is not supported by this browser.";
  }
}

function showPosition(position) {
    let latLong = position.coords.latitude + "," + position.coords.longitude;
    console.log(latLong);
    console.log($('.venue-type').val());
    return latLong;
    //take .log off later
}

//1.when app loads run this function
unhideKeyword();
watchForm();